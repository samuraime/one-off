{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","value","setValue","mids","setMids","loading","setLoading","className","noValidate","autoComplete","onSubmit","e","preventDefault","fetch","process","method","headers","body","JSON","stringify","then","res","json","array","csv","length","Object","keys","join","map","row","entries","entry","filename","data","a","document","createElement","objectURL","URL","createObjectURL","href","download","click","revokeObjectURL","saveAs","Blob","type","catch","error","alert","message","finally","Typography","variant","TextField","label","multiline","fullWidth","onChange","target","split","string","matched","match","filter","Boolean","placeholder","margin","helperText","Button","color","disabled","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"wQA8FeA,MA7Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAkCb,OACE,0BAAMC,UAAU,OAAOC,YAAU,EAACC,aAAa,MAAMC,SA1BlC,SAACC,GACpBA,EAAEC,iBACFN,GAAW,GAEXO,MAAM,GAAD,OAAIC,gCAAJ,OAAyC,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEhB,WAEtBiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAH,GACJ,IA1CQM,EA0CFC,GA1CED,EA0CWN,GAzCdQ,OAIIC,OAAOC,KAAKJ,EAAM,IAAIK,KAAK,KAAO,KACpCL,EAAMM,KAAI,SAACC,GAAD,OAASJ,OAAOK,QAAQD,GAAKD,KAAI,SAACG,GAAD,OAAWA,EAAM,MAAIJ,KAAK,QAAMA,KAAK,MAJpF,IASX,SAAgBK,EAAUC,GACxB,IAAMC,EAAIC,SAASC,cAAc,KAC3BC,EAAYC,IAAIC,gBAAgBN,GACtCC,EAAEM,KAAOH,EACTH,EAAEO,SAAWT,EACbE,EAAEQ,QACFJ,IAAIK,gBAAgBN,GA2BdO,CAAO,SADM,IAAIC,KAAK,CAACtB,GAAM,CAAEuB,KAAO,mBAGvCC,OAAM,SAACC,GACNC,MAAMD,EAAME,YAEbC,SAAQ,WACP9C,GAAW,QAMb,kBAAC+C,EAAA,EAAD,CAAYC,QAAQ,MAApB,2BACA,kBAACC,EAAA,EAAD,CACEhD,UAAU,MACViD,MAAM,OACNC,WAAS,EACTC,WAAS,EACTzD,MAAOA,EACP0D,SAvCe,SAAChD,GACpB,IAAMR,EAAeQ,EAAEiD,OAAO3D,MAjCpB4D,MAAM,MACfhC,KAAI,SAACiC,GACJ,IAAMC,EAAUD,EAAOE,MAAM,oBAC7B,QAAOD,GAAUA,EAAQ,MAE1BE,OAAOC,SA6BRhE,EAASS,EAAEiD,OAAO3D,OAClBG,EAAQD,IAqCJgE,YAAY,2EACZC,OAAO,SACPC,WAAU,sBAAiBlE,EAAKsB,UAElC,kBAAC6C,EAAA,EAAD,CACE/D,UAAU,MACV+C,QAAQ,YACRiB,MAAM,UACNxB,KAAK,SACLyB,SAAUnE,GALZ,YCrEc6D,QACW,cAA7BO,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAAS0C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLmC,QAAQnC,MAAMA,EAAME,c","file":"static/js/main.45fc3311.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, TextField, Typography } from '@material-ui/core';\nimport './App.css';\n\nfunction getMids(text) {\n  return text.split('\\n')\n    .map((string) => {\n      const matched = string.match(/[?&]mid=([^?&]+)/);\n      return matched ? matched[1] : false;\n    })\n    .filter(Boolean);\n}\n\nfunction getCSV(array) {\n  if (!array.length) {\n    return '';\n  }\n\n  const header = Object.keys(array[0]).join(',') + '\\n';\n  const body = array.map((row) => Object.entries(row).map((entry) => entry[1]).join(',')).join('\\n');\n\n  return header + body;\n}\n\nfunction saveAs(filename, data) {\n  const a = document.createElement('a');\n  const objectURL = URL.createObjectURL(data);\n  a.href = objectURL;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(objectURL);\n}\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [mids, setMids] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleChange = (e) => {\n    const mids = getMids(e.target.value);\n    setValue(e.target.value);\n    setMids(mids);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    fetch(`${process.env.REACT_APP_API_HOST}/kg`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({ mids }),\n    })\n      .then(res => res.json())\n      .then(body => {\n        const csv = getCSV(body);\n        const blob = new Blob([csv], { type : 'text/plain' });\n        saveAs('kg.csv', blob);\n      })\n      .catch((error) => {\n        alert(error.message);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <form className=\"form\" noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Typography variant=\"h5\">Get Kæ­Œ Rank Detail</Typography>\n      <TextField\n        className=\"row\"\n        label=\"URLs\"\n        multiline\n        fullWidth\n        value={value}\n        onChange={handleChange}\n        placeholder=\"example: https://kg.qq.com/accompanydetail/index.html?mid=000IsIQC1S3E6A\"\n        margin=\"normal\"\n        helperText={`valid URLs: ${mids.length}`}\n      />\n      <Button\n        className=\"row\"\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={loading}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}